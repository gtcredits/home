import { Injectable } from '@angular/core';import { Http, Response } from '@angular/http';import { ExamService } from './exam.service';import 'rxjs/add/operator/map';@Injectable()export class ConvertScoreService {  private courses: string[] = [];  totalHours: number = 0;  constructor(  private http: Http,  private _exam: ExamService) { }  public parseData() {    this._exam.examArr.forEach(exam => {      switch(exam.getType()) {        case 'AP':          this.getAPData().subscribe(res => {            var apData = JSON.parse(res['_body']);            if (exam.getScore() >= apData[exam.getName()]['scores'][0]){              exam.setTranslatedCourse(apData[exam.getName()]['course']);              exam.setTranslatedHours(apData[exam.getName()]['hours']);              this.addCourse(exam.getTranslatedCourse());              console.log(this.getCourses());            } else {              exam.setTranslatedCourse('SCORE DOES NOT TRANSLATE');              exam.setTranslatedHours(0);            }            if (this._exam.examArr.every(exam => exam.getTranslatedHours() != null)) {              this.calculateTotalHours();            }          });          break;        case 'IB-High':          this.getIBHighData().subscribe(res => {            var ibhData = JSON.parse(res['_body']);            if (exam.getScore() >= ibhData[exam.getName()]['scores'][0]){              exam.setTranslatedCourse(ibhData[exam.getName()]['course']);              exam.setTranslatedHours(ibhData[exam.getName()]['hours']);              this.addCourse(exam.getTranslatedCourse());              console.log(this.getCourses());            } else {              exam.setTranslatedCourse('SCORE DOES NOT TRANSLATE');              exam.setTranslatedHours(0);            }            if (this._exam.examArr.every(exam => exam.getTranslatedHours() != null)) {              this.calculateTotalHours();            }          });          break;          case 'IB-Standard':            this.getIBStandardData().subscribe(res => {              var ibsData = JSON.parse(res['_body']);              if (exam.getScore() >= ibsData[exam.getName()]['scores'][0]){                exam.setTranslatedCourse(ibsData[exam.getName()]['course']);                exam.setTranslatedHours(ibsData[exam.getName()]['hours']);                this.addCourse(exam.getTranslatedCourse());                console.log(this.getCourses());              } else {                exam.setTranslatedCourse('SCORE DOES NOT TRANSLATE');                exam.setTranslatedHours(0);              }              if (this._exam.examArr.every(exam => exam.getTranslatedHours() != null)) {                this.calculateTotalHours();            }          });          break;        case 'SAT':          this.getSATData().subscribe(res => {            var satData = JSON.parse(res['_body']);            if (exam.getScore() >= satData[exam.getName()]['scores'][0]){              exam.setTranslatedCourse(satData[exam.getName()]['course']);              exam.setTranslatedHours(satData[exam.getName()]['hours']);              this.addCourse(exam.getTranslatedCourse());              console.log(this.getCourses());            } else {              exam.setTranslatedCourse('SCORE DOES NOT TRANSLATE');              exam.setTranslatedHours(0);            }            if (this._exam.examArr.every(exam => exam.getTranslatedHours() != null)) {              this.calculateTotalHours();            }          });        break;      }      // this._rightPanel.toggleDisplayResults();    });  }  public getAPData(): any {  return this.http.get('../assets/data/ap.json').map(res => res);  }  public getIBHighData(): any {  return this.http.get('../assets/data/ib-high.json').map(res => res);  }  public getIBStandardData(): any {  return this.http.get('../assets/data/ib-standard.json').map(res => res);  }  public getSATData(): any {  return this.http.get('../assets/data/sat.json').map(res => res);  }  public calculateTotalHours() {  this._exam.examArr.forEach (exam => {  this.totalHours = this.totalHours + exam.getTranslatedHours();  });  }  public addCourse(course:string) {  this.courses.push(course);  }  public getCourses() {  return this.courses;  }  public removeAll() {  this.courses.splice(0, this.courses.length);  }}